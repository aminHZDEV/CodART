plugins.collaboration.jabber.view.MapSharingWizardView	[plugins.collaboration.jabber.view.MapSharingWizardView::javax.swing.JButton closeBtn, plugins.collaboration.jabber.view.MapSharingWizardView::addCloseButtonMouseListener(java.awt.event.MouseListener):void, plugins.collaboration.jabber.view.MapSharingWizardView::javax.swing.JPanel closeButtonPanel, plugins.collaboration.jabber.view.MapSharingWizardView::addCloseButton(javax.swing.JPanel):void, plugins.collaboration.jabber.view.MapSharingWizardView::javax.swing.JButton nextBtn, plugins.collaboration.jabber.view.MapSharingWizardView::addNextButtonMouseListener(java.awt.event.MouseListener):void, plugins.collaboration.jabber.view.MapSharingWizardView::addWizardButtons(javax.swing.JPanel, boolean):void, plugins.collaboration.jabber.view.MapSharingWizardView::javax.swing.JButton backBtn, plugins.collaboration.jabber.view.MapSharingWizardView::addBackButtonMouseListener(java.awt.event.MouseListener):void, plugins.collaboration.jabber.view.MapSharingWizardView::javax.swing.JPanel wizardButtonPanel, plugins.collaboration.jabber.view.MapSharingWizardView::javax.swing.JButton acceptBtn, plugins.collaboration.jabber.view.MapSharingWizardView::addAcceptButtonMouseListener(java.awt.event.MouseListener):void, plugins.collaboration.jabber.view.MapSharingWizardView::addAcceptDeclineButtons(javax.swing.JPanel):void, plugins.collaboration.jabber.view.MapSharingWizardView::javax.swing.JButton declineBtn, plugins.collaboration.jabber.view.MapSharingWizardView::addDeclineButtonMouseListener(java.awt.event.MouseListener):void, plugins.collaboration.jabber.view.MapSharingWizardView::javax.swing.JPanel buttonPanel]
plugins.collaboration.jabber.view.MapSharingWizardView	[plugins.collaboration.jabber.view.MapSharingWizardView::javax.swing.JButton closeBtn, plugins.collaboration.jabber.view.MapSharingWizardView::addCloseButtonMouseListener(java.awt.event.MouseListener):void, plugins.collaboration.jabber.view.MapSharingWizardView::javax.swing.JPanel closeButtonPanel, plugins.collaboration.jabber.view.MapSharingWizardView::addCloseButton(javax.swing.JPanel):void, plugins.collaboration.jabber.view.MapSharingWizardView::javax.swing.JButton nextBtn, plugins.collaboration.jabber.view.MapSharingWizardView::addNextButtonMouseListener(java.awt.event.MouseListener):void, plugins.collaboration.jabber.view.MapSharingWizardView::addWizardButtons(javax.swing.JPanel, boolean):void, plugins.collaboration.jabber.view.MapSharingWizardView::javax.swing.JButton backBtn, plugins.collaboration.jabber.view.MapSharingWizardView::addBackButtonMouseListener(java.awt.event.MouseListener):void, plugins.collaboration.jabber.view.MapSharingWizardView::javax.swing.JPanel wizardButtonPanel]
plugins.collaboration.jabber.view.MapSharingWizardView	[plugins.collaboration.jabber.view.MapSharingWizardView::javax.swing.JButton closeBtn, plugins.collaboration.jabber.view.MapSharingWizardView::addCloseButtonMouseListener(java.awt.event.MouseListener):void, plugins.collaboration.jabber.view.MapSharingWizardView::javax.swing.JPanel closeButtonPanel, plugins.collaboration.jabber.view.MapSharingWizardView::addCloseButton(javax.swing.JPanel):void]
plugins.collaboration.jabber.view.MapSharingWizardView	[plugins.collaboration.jabber.view.MapSharingWizardView::javax.swing.JButton nextBtn, plugins.collaboration.jabber.view.MapSharingWizardView::addNextButtonMouseListener(java.awt.event.MouseListener):void, plugins.collaboration.jabber.view.MapSharingWizardView::addWizardButtons(javax.swing.JPanel, boolean):void, plugins.collaboration.jabber.view.MapSharingWizardView::javax.swing.JButton backBtn, plugins.collaboration.jabber.view.MapSharingWizardView::addBackButtonMouseListener(java.awt.event.MouseListener):void, plugins.collaboration.jabber.view.MapSharingWizardView::javax.swing.JPanel wizardButtonPanel]
plugins.collaboration.jabber.view.MapSharingWizardView	[plugins.collaboration.jabber.view.MapSharingWizardView::javax.swing.JButton acceptBtn, plugins.collaboration.jabber.view.MapSharingWizardView::addAcceptButtonMouseListener(java.awt.event.MouseListener):void, plugins.collaboration.jabber.view.MapSharingWizardView::addAcceptDeclineButtons(javax.swing.JPanel):void, plugins.collaboration.jabber.view.MapSharingWizardView::javax.swing.JButton declineBtn, plugins.collaboration.jabber.view.MapSharingWizardView::addDeclineButtonMouseListener(java.awt.event.MouseListener):void, plugins.collaboration.jabber.view.MapSharingWizardView::javax.swing.JPanel buttonPanel]
freemind.modes.common.actions.FindAction	[freemind.modes.common.actions.FindAction::freemind.modes.ControllerAdapter controller, freemind.modes.common.actions.FindAction::javax.swing.JDialog mDialog, freemind.modes.common.actions.FindAction::javax.swing.JCheckBox mFindInNotesTooBox, freemind.modes.common.actions.FindAction::java.lang.String mLastSearchString, freemind.modes.common.actions.FindAction::javax.swing.JTextField mSearchField, freemind.modes.common.actions.FindAction::int mResult, freemind.modes.common.actions.FindAction::close(int):void, freemind.modes.common.actions.FindAction::displayDialog():void, freemind.modes.common.actions.FindAction::displayNode(freemind.modes.MindMapNode, java.util.ArrayList):void]
freemind.modes.common.actions.FindAction	[freemind.modes.common.actions.FindAction::java.util.ArrayList findNodesUnfoldedByLastFind, freemind.modes.common.actions.FindAction::find(freemind.modes.MindMapNode, java.util.Collection, boolean):boolean, freemind.modes.common.actions.FindAction::freemind.modes.MindMapNode findFromNode, freemind.modes.common.actions.FindAction::getFindFromText():java.lang.String]
freemind.modes.mindmapmode.actions.xml.ActionFactory	[freemind.modes.mindmapmode.actions.xml.ActionFactory::java.util.Vector registeredHandler, freemind.modes.mindmapmode.actions.xml.ActionFactory::doTransaction(java.lang.String, freemind.modes.mindmapmode.actions.xml.ActionPair):boolean, freemind.modes.mindmapmode.actions.xml.ActionFactory::registerHandler(freemind.modes.mindmapmode.actions.xml.ActionHandler):void, freemind.modes.mindmapmode.actions.xml.ActionFactory::deregisterHandler(freemind.modes.mindmapmode.actions.xml.ActionHandler):void, freemind.modes.mindmapmode.actions.xml.ActionFactory::startTransaction(java.lang.String):void, freemind.modes.mindmapmode.actions.xml.ActionFactory::endTransaction(java.lang.String):void, freemind.modes.mindmapmode.actions.xml.ActionFactory::java.util.Vector registeredFilters, freemind.modes.mindmapmode.actions.xml.ActionFactory::registerFilter(freemind.modes.mindmapmode.actions.xml.ActionFilter):void, freemind.modes.mindmapmode.actions.xml.ActionFactory::deregisterFilter(freemind.modes.mindmapmode.actions.xml.ActionFilter):void, freemind.modes.mindmapmode.actions.xml.ActionFactory::freemind.modes.mindmapmode.actions.xml.UndoActionHandler undoActionHandler, freemind.modes.mindmapmode.actions.xml.ActionFactory::executeAction(freemind.modes.mindmapmode.actions.xml.ActionPair):boolean]
freemind.modes.mindmapmode.actions.xml.ActionFactory	[freemind.modes.mindmapmode.actions.xml.ActionFactory::java.util.Vector registeredFilters, freemind.modes.mindmapmode.actions.xml.ActionFactory::registerFilter(freemind.modes.mindmapmode.actions.xml.ActionFilter):void, freemind.modes.mindmapmode.actions.xml.ActionFactory::deregisterFilter(freemind.modes.mindmapmode.actions.xml.ActionFilter):void]
freemind.modes.mindmapmode.actions.xml.ActionFactory	[freemind.modes.mindmapmode.actions.xml.ActionFactory::java.util.HashMap registeredActors, freemind.modes.mindmapmode.actions.xml.ActionFactory::registerActor(freemind.modes.mindmapmode.actions.xml.ActorXml, java.lang.Class):void, freemind.modes.mindmapmode.actions.xml.ActionFactory::deregisterActor(java.lang.Class):void, freemind.modes.mindmapmode.actions.xml.ActionFactory::getActor(freemind.controller.actions.generated.instance.XmlAction):freemind.modes.mindmapmode.actions.xml.ActorXml]
freemind.modes.mindmapmode.actions.xml.ActionFactory	[freemind.modes.mindmapmode.actions.xml.ActionFactory::java.util.Vector registeredHandler, freemind.modes.mindmapmode.actions.xml.ActionFactory::doTransaction(java.lang.String, freemind.modes.mindmapmode.actions.xml.ActionPair):boolean, freemind.modes.mindmapmode.actions.xml.ActionFactory::registerHandler(freemind.modes.mindmapmode.actions.xml.ActionHandler):void, freemind.modes.mindmapmode.actions.xml.ActionFactory::deregisterHandler(freemind.modes.mindmapmode.actions.xml.ActionHandler):void, freemind.modes.mindmapmode.actions.xml.ActionFactory::startTransaction(java.lang.String):void, freemind.modes.mindmapmode.actions.xml.ActionFactory::endTransaction(java.lang.String):void]
freemind.modes.mindmapmode.actions.xml.ActionFactory	[freemind.modes.mindmapmode.actions.xml.ActionFactory::java.util.Vector registeredFilters, freemind.modes.mindmapmode.actions.xml.ActionFactory::registerFilter(freemind.modes.mindmapmode.actions.xml.ActionFilter):void, freemind.modes.mindmapmode.actions.xml.ActionFactory::deregisterFilter(freemind.modes.mindmapmode.actions.xml.ActionFilter):void, freemind.modes.mindmapmode.actions.xml.ActionFactory::freemind.modes.mindmapmode.actions.xml.UndoActionHandler undoActionHandler, freemind.modes.mindmapmode.actions.xml.ActionFactory::executeAction(freemind.modes.mindmapmode.actions.xml.ActionPair):boolean]
freemind.modes.mindmapmode.attributeactors.ImportAttributesDialog	[freemind.modes.mindmapmode.attributeactors.ImportAttributesDialog::freemind.modes.attributes.AttributeRegistry currentAttributes, freemind.modes.mindmapmode.attributeactors.ImportAttributesDialog::createMapSubTrees(javax.swing.tree.DefaultMutableTreeNode):void, freemind.modes.mindmapmode.attributeactors.ImportAttributesDialog::createAttributeSubTrees(javax.swing.tree.DefaultMutableTreeNode, freemind.modes.attributes.AttributeRegistry):void, freemind.modes.mindmapmode.attributeactors.ImportAttributesDialog::freemind.controller.Controller c, freemind.modes.mindmapmode.attributeactors.ImportAttributesDialog::createValueSubTrees(javax.swing.tree.DefaultMutableTreeNode, freemind.modes.attributes.AttributeRegistryElement, freemind.modes.attributes.AttributeRegistry):void, freemind.modes.mindmapmode.attributeactors.ImportAttributesDialog::performImport(javax.swing.tree.DefaultMutableTreeNode):void]
freemind.modes.mindmapmode.attributeactors.ImportAttributesDialog	[freemind.modes.mindmapmode.attributeactors.ImportAttributesDialog::javax.swing.tree.DefaultTreeModel treeModel, freemind.modes.mindmapmode.attributeactors.ImportAttributesDialog::setParentSelectionType(javax.swing.tree.DefaultMutableTreeNode, int):void, freemind.modes.mindmapmode.attributeactors.ImportAttributesDialog::setSelectionType(javax.swing.tree.TreeNode, int):void]
freemind.extensions.HookDescriptorBase	[freemind.extensions.HookDescriptorBase::freemind.main.FreeMindMain frame, freemind.extensions.HookDescriptorBase::getClassLoader(java.util.List):java.lang.ClassLoader, freemind.extensions.HookDescriptorBase::getFromPropertiesIfNecessary(java.lang.String):java.lang.String, freemind.extensions.HookDescriptorBase::java.lang.String mXmlPluginFile, freemind.extensions.HookDescriptorBase::getPluginDirectory():java.lang.String, freemind.extensions.HookDescriptorBase::getFromResourceIfNecessary(java.lang.String):java.lang.String, freemind.extensions.HookDescriptorBase::createPluginClasspathString(java.util.List):java.lang.String]
freemind.extensions.HookDescriptorBase	[freemind.extensions.HookDescriptorBase::freemind.controller.actions.generated.instance.Plugin pluginBase, freemind.extensions.HookDescriptorBase::getPluginClasspath():java.util.List, freemind.extensions.HookDescriptorBase::getPluginClassLoader():java.lang.ClassLoader]
freemind.modes.mindmapmode.MindMapToolBar	[freemind.modes.mindmapmode.MindMapToolBar::javax.swing.JComboBox fonts, freemind.modes.mindmapmode.MindMapToolBar::boolean fontFamily_IgnoreChangeEvent, freemind.modes.mindmapmode.MindMapToolBar::selectFontName(java.lang.String):void, freemind.modes.mindmapmode.MindMapToolBar::setAllActions(boolean):void, freemind.modes.mindmapmode.MindMapToolBar::javax.swing.JComboBox size, freemind.modes.mindmapmode.MindMapToolBar::boolean fontSize_IgnoreChangeEvent, freemind.modes.mindmapmode.MindMapToolBar::selectFontSize(java.lang.String):void]
freemind.modes.mindmapmode.MindMapToolBar	[freemind.modes.mindmapmode.MindMapToolBar::javax.swing.JComboBox size, freemind.modes.mindmapmode.MindMapToolBar::boolean fontSize_IgnoreChangeEvent, freemind.modes.mindmapmode.MindMapToolBar::selectFontSize(java.lang.String):void]
freemind.modes.mindmapmode.MindMapToolBar	[freemind.modes.mindmapmode.MindMapToolBar::javax.swing.JComboBox fonts, freemind.modes.mindmapmode.MindMapToolBar::boolean fontFamily_IgnoreChangeEvent, freemind.modes.mindmapmode.MindMapToolBar::selectFontName(java.lang.String):void, freemind.modes.mindmapmode.MindMapToolBar::setAllActions(boolean):void]
plugins.map.MapDialog	[plugins.map.MapDialog::boolean mLimitSearchToRegion, plugins.map.MapDialog::javax.swing.JLabel mSearchStringLabel, plugins.map.MapDialog::java.lang.String mResourceSearchLocationString, plugins.map.MapDialog::java.lang.String mResourceSearchString, plugins.map.MapDialog::toggleLimitSearchToRegion():void]
plugins.map.MapDialog	[plugins.map.MapDialog::java.util.HashMap mMarkerMap, plugins.map.MapDialog::getMapNodePositionHolders():java.util.Set, plugins.map.MapDialog::getMarkerMap():java.util.Map]
plugins.map.MapDialog	[plugins.map.MapDialog::plugins.map.JCursorMapViewer map, plugins.map.MapDialog::changeVisibilityOfNode(plugins.map.MapNodePositionHolder, boolean):void, plugins.map.MapDialog::removeMapMarker(plugins.map.MapNodePositionHolder):void, plugins.map.MapDialog::selectMapPosition(freemind.view.mindmapview.NodeView, boolean):void, plugins.map.MapDialog::addMapMarker(plugins.map.MapNodePositionHolder):void]
accessories.plugins.dialogs.EnterPasswordDialog	[accessories.plugins.dialogs.EnterPasswordDialog::javax.swing.JPasswordField jPasswordField, accessories.plugins.dialogs.EnterPasswordDialog::getJPasswordField():javax.swing.JPasswordField, accessories.plugins.dialogs.EnterPasswordDialog::javax.swing.JPasswordField jPasswordField1, accessories.plugins.dialogs.EnterPasswordDialog::getJPasswordField1():javax.swing.JPasswordField, accessories.plugins.dialogs.EnterPasswordDialog::checkEqualAndMinimumSize():boolean, accessories.plugins.dialogs.EnterPasswordDialog::boolean enterTwoPasswords]
accessories.plugins.dialogs.EnterPasswordDialog	[accessories.plugins.dialogs.EnterPasswordDialog::javax.swing.JPasswordField jPasswordField1, accessories.plugins.dialogs.EnterPasswordDialog::getJPasswordField1():javax.swing.JPasswordField, accessories.plugins.dialogs.EnterPasswordDialog::checkEqualAndMinimumSize():boolean, accessories.plugins.dialogs.EnterPasswordDialog::boolean enterTwoPasswords]
accessories.plugins.dialogs.EnterPasswordDialog	[accessories.plugins.dialogs.EnterPasswordDialog::javax.swing.JButton jOKButton, accessories.plugins.dialogs.EnterPasswordDialog::getJOKButton():javax.swing.JButton, accessories.plugins.dialogs.EnterPasswordDialog::freemind.modes.ModeController controller]
accessories.plugins.dialogs.EnterPasswordDialog	[accessories.plugins.dialogs.EnterPasswordDialog::int result, accessories.plugins.dialogs.EnterPasswordDialog::java.lang.StringBuffer password, accessories.plugins.dialogs.EnterPasswordDialog::cancelPressed():void, accessories.plugins.dialogs.EnterPasswordDialog::okPressed():void, accessories.plugins.dialogs.EnterPasswordDialog::javax.swing.JPasswordField jPasswordField, accessories.plugins.dialogs.EnterPasswordDialog::getJPasswordField():javax.swing.JPasswordField, accessories.plugins.dialogs.EnterPasswordDialog::javax.swing.JPasswordField jPasswordField1, accessories.plugins.dialogs.EnterPasswordDialog::getJPasswordField1():javax.swing.JPasswordField, accessories.plugins.dialogs.EnterPasswordDialog::checkEqualAndMinimumSize():boolean, accessories.plugins.dialogs.EnterPasswordDialog::boolean enterTwoPasswords]
freemind.modes.attributes.AttributeRegistry	[freemind.modes.attributes.AttributeRegistry::javax.swing.event.EventListenerList listenerList, freemind.modes.attributes.AttributeRegistry::addChangeListener(javax.swing.event.ChangeListener):void, freemind.modes.attributes.AttributeRegistry::removeChangeListener(javax.swing.event.ChangeListener):void, freemind.modes.attributes.AttributeRegistry::addAttributesListener(freemind.modes.mindmapmode.attributeactors.AttributesListener):void, freemind.modes.attributes.AttributeRegistry::removeAttributesListener(freemind.modes.mindmapmode.attributeactors.AttributesListener):void, freemind.modes.attributes.AttributeRegistry::javax.swing.event.ChangeEvent changeEvent, freemind.modes.attributes.AttributeRegistry::fireStateChanged():void, freemind.modes.attributes.AttributeRegistry::javax.swing.event.ChangeEvent attributesEvent, freemind.modes.attributes.AttributeRegistry::fireAttributesChanged():void]
freemind.modes.attributes.AttributeRegistry	[freemind.modes.attributes.AttributeRegistry::freemind.modes.MapRegistry registry, freemind.modes.attributes.AttributeRegistry::getAttributeController():freemind.modes.attributes.AttributeController, freemind.modes.attributes.AttributeRegistry::removeAtribute(java.lang.Object):void]
freemind.modes.attributes.AttributeRegistry	[freemind.modes.attributes.AttributeRegistry::int visibleElementsNumber, freemind.modes.attributes.AttributeRegistry::decrementVisibleElementsNumber():void, freemind.modes.attributes.AttributeRegistry::incrementVisibleElementsNumber():void]
freemind.modes.attributes.AttributeRegistry	[freemind.modes.attributes.AttributeRegistry::javax.swing.event.EventListenerList listenerList, freemind.modes.attributes.AttributeRegistry::addChangeListener(javax.swing.event.ChangeListener):void, freemind.modes.attributes.AttributeRegistry::removeChangeListener(javax.swing.event.ChangeListener):void, freemind.modes.attributes.AttributeRegistry::addAttributesListener(freemind.modes.mindmapmode.attributeactors.AttributesListener):void, freemind.modes.attributes.AttributeRegistry::removeAttributesListener(freemind.modes.mindmapmode.attributeactors.AttributesListener):void]
freemind.modes.attributes.AttributeRegistry	[freemind.modes.attributes.AttributeRegistry::javax.swing.event.ChangeEvent changeEvent, freemind.modes.attributes.AttributeRegistry::fireStateChanged():void, freemind.modes.attributes.AttributeRegistry::javax.swing.event.ChangeEvent attributesEvent, freemind.modes.attributes.AttributeRegistry::fireAttributesChanged():void]
freemind.modes.attributes.AttributeRegistry	[freemind.modes.attributes.AttributeRegistry::freemind.controller.filter.util.SortedMapVector elements, freemind.modes.attributes.AttributeRegistry::freemind.modes.attributes.AttributeRegistryTableModel myTableModel, freemind.modes.attributes.AttributeRegistry::getElement(int):freemind.modes.attributes.AttributeRegistryElement, freemind.modes.attributes.AttributeRegistry::getElement(java.lang.Comparable):freemind.modes.attributes.AttributeRegistryElement, freemind.modes.attributes.AttributeRegistry::getDefaultComboBoxModel(java.lang.Comparable):javax.swing.ComboBoxModel, freemind.modes.attributes.AttributeRegistry::setRestricted(int, boolean):void, freemind.modes.attributes.AttributeRegistry::registry(java.lang.String):void, freemind.modes.attributes.AttributeRegistry::unregistry(java.lang.String):void]
freemind.modes.mindmapmode.MindMapController	[freemind.modes.mindmapmode.MindMapController::java.awt.datatransfer.Clipboard clipboard, freemind.modes.mindmapmode.MindMapController::getClipboardContents():java.awt.datatransfer.Transferable, freemind.modes.mindmapmode.MindMapController::java.awt.datatransfer.Clipboard selection, freemind.modes.mindmapmode.MindMapController::setClipboardContents(java.awt.datatransfer.Transferable):void, freemind.modes.mindmapmode.MindMapController::getClipboard():void]
freemind.modes.mindmapmode.MindMapController	[freemind.modes.mindmapmode.MindMapController::java.util.HashSet mPlugins, freemind.modes.mindmapmode.MindMapController::deregisterPlugin(freemind.modes.mindmapmode.MindMapController.MindMapControllerPlugin):void, freemind.modes.mindmapmode.MindMapController::getPlugins():java.util.Set]
freemind.modes.mindmapmode.MindMapController	[freemind.modes.mindmapmode.MindMapController::java.awt.datatransfer.Clipboard selection, freemind.modes.mindmapmode.MindMapController::setClipboardContents(java.awt.datatransfer.Transferable):void, freemind.modes.mindmapmode.MindMapController::getClipboard():void]
plugins.map.FreeMindMapController	[plugins.map.FreeMindMapController::java.util.Vector mPositionHolderVector, plugins.map.FreeMindMapController::int mPositionHolderIndex, plugins.map.FreeMindMapController::checkPositionHolderIndex(int):boolean, plugins.map.FreeMindMapController::setPositionHolderIndex(int):void]
plugins.map.FreeMindMapController	[plugins.map.FreeMindMapController::javax.swing.JPopupMenu mContextPopupMenu, plugins.map.FreeMindMapController::getContextPopupMenu():javax.swing.JPopupMenu, plugins.map.FreeMindMapController::plugins.map.FreeMindMapController.ControllerPopupMenuListener popupListenerSingleton, plugins.map.FreeMindMapController::javax.swing.JPopupMenu mSearchPopupMenu, plugins.map.FreeMindMapController::getSearchPopupMenu():javax.swing.JPopupMenu]
plugins.map.FreeMindMapController	[plugins.map.FreeMindMapController::javax.swing.JPopupMenu mContextPopupMenu, plugins.map.FreeMindMapController::getContextPopupMenu():javax.swing.JPopupMenu, plugins.map.FreeMindMapController::plugins.map.FreeMindMapController.ControllerPopupMenuListener popupListenerSingleton]
plugins.map.FreeMindMapController	[plugins.map.FreeMindMapController::java.util.Vector mPositionHolderVector, plugins.map.FreeMindMapController::int mPositionHolderIndex, plugins.map.FreeMindMapController::checkPositionHolderIndex(int):boolean, plugins.map.FreeMindMapController::setPositionHolderIndex(int):void, plugins.map.FreeMindMapController::plugins.map.FreeMindMapController.MoveForwardAction mMoveForwardAction, plugins.map.FreeMindMapController::plugins.map.FreeMindMapController.MoveBackwardAction mMoveBackwardAction, plugins.map.FreeMindMapController::storeMapPosition(org.openstreetmap.gui.jmapviewer.Coordinate):void]
plugins.map.FreeMindMapController	[plugins.map.FreeMindMapController::freemind.modes.mindmapmode.MindMapController mMindMapController, plugins.map.FreeMindMapController::addPictureToNode(plugins.map.MapNodePositionHolder, freemind.modes.mindmapmode.MindMapController):void, plugins.map.FreeMindMapController::insertNewNode(freemind.modes.MindMapNode):freemind.modes.MindMapNode, plugins.map.FreeMindMapController::addNode(freemind.modes.MindMapNode, freemind.controller.actions.generated.instance.Place):void]
accessories.plugins.FormularEditor.FormularEntity	[accessories.plugins.FormularEditor.FormularEntity::java.lang.String label, accessories.plugins.FormularEditor.FormularEntity::java.lang.String displayLabel, accessories.plugins.FormularEditor.FormularEntity::addToPanel(javax.swing.JPanel, java.awt.GridBagLayout, int):void]
accessories.plugins.NodeHistory.NodeHolder	[accessories.plugins.NodeHistory.NodeHolder::java.lang.String mMapModuleName, accessories.plugins.NodeHistory.NodeHolder::getMapModule(freemind.controller.Controller):freemind.view.MapModule, accessories.plugins.NodeHistory.NodeHolder::getModeController(freemind.controller.Controller):freemind.modes.ModeController]
freemind.controller.Controller	[freemind.controller.Controller::boolean antialiasEdges, freemind.controller.Controller::setEdgesRenderingHint(java.awt.Graphics2D):java.lang.Object, freemind.controller.Controller::boolean antialiasAll, freemind.controller.Controller::setTextRenderingHint(java.awt.Graphics2D):void]
freemind.controller.Controller	[freemind.controller.Controller::java.util.HashSet mZoomListenerSet, freemind.controller.Controller::deregisterZoomListener(freemind.controller.ZoomListener):void, freemind.controller.Controller::changeZoomValueProperty(float):void]
freemind.controller.Controller	[freemind.controller.Controller::java.awt.print.PageFormat pageFormat, freemind.controller.Controller::java.awt.print.PrinterJob printerJob, freemind.controller.Controller::acquirePrinterJobAndPageFormat():boolean, freemind.controller.Controller::storePageFormat():void, freemind.controller.Controller::setProperty(java.lang.String, java.lang.String):void, freemind.controller.Controller::getDefaultFontFamilyName():java.lang.String, freemind.controller.Controller::isSelectionAsRectangle():boolean, freemind.controller.Controller::toggleSelectionAsRectangle():void]
freemind.controller.LastOpenedList	[freemind.controller.LastOpenedList::java.util.List lastOpenedList, freemind.controller.LastOpenedList::load(java.lang.String):void, freemind.controller.LastOpenedList::listIterator():java.util.ListIterator, freemind.controller.LastOpenedList::save():java.lang.String]
freemind.controller.LastOpenedList	[freemind.controller.LastOpenedList::freemind.controller.Controller mController, freemind.controller.LastOpenedList::java.util.Map mRestorableToMapName, freemind.controller.LastOpenedList::int maxEntries, freemind.controller.LastOpenedList::mapOpened(freemind.view.MapModule):void, freemind.controller.LastOpenedList::open(java.lang.String):boolean]
freemind.controller.printpreview.Preview	[freemind.controller.printpreview.Preview::java.awt.image.BufferedImage previewPageImage, freemind.controller.printpreview.Preview::moveIndex(int):void, freemind.controller.printpreview.Preview::int index]
freemind.main.EditServer	[freemind.main.EditServer::freemind.main.FreeMindMain mFrame, freemind.main.EditServer::int authKey, freemind.main.EditServer::handleClient(java.net.Socket, java.io.DataInputStream):boolean]
freemind.main.EditServer	[freemind.main.EditServer::java.lang.String portFile, freemind.main.EditServer::stopServer():void, freemind.main.EditServer::boolean abort]
freemind.main.FreeMindCommon	[freemind.main.FreeMindCommon::freemind.main.FreeMindCommon.FreemindResourceBundle resources, freemind.main.FreeMindCommon::getResources():java.util.ResourceBundle, freemind.main.FreeMindCommon::clearLanguageResources():void, freemind.main.FreeMindCommon::getResourceString(java.lang.String):java.lang.String]
freemind.main.FreeMindCommon	[freemind.main.FreeMindCommon::java.lang.String baseDir, freemind.main.FreeMindCommon::getFreemindBaseDirOld():java.lang.String, freemind.main.FreeMindCommon::getFreemindBaseDir():java.lang.String, freemind.main.FreeMindCommon::getFreeMindClassLoader():java.lang.ClassLoader]
freemind.main.XMLElement	[freemind.main.XMLElement::java.lang.String contents, freemind.main.XMLElement::boolean dontEncodeContents, freemind.main.XMLElement::setContent(java.lang.String):void, freemind.main.XMLElement::setEncodedContent(java.lang.String):void]
freemind.main.XMLElement	[freemind.main.XMLElement::java.util.Hashtable entities, freemind.main.XMLElement::createAnotherElement():freemind.main.XMLElement, freemind.main.XMLElement::boolean ignoreWhitespace, freemind.main.XMLElement::resolveEntity(java.lang.StringBuffer):void, freemind.main.XMLElement::scanString(java.lang.StringBuffer):void, freemind.main.XMLElement::skipComment():void, freemind.main.XMLElement::skipSpecialTag(int):void, freemind.main.XMLElement::char charReadTooMuch, freemind.main.XMLElement::scanPCData(java.lang.StringBuffer):void, freemind.main.XMLElement::scanIdentifier(java.lang.StringBuffer):void, freemind.main.XMLElement::checkCDATA(java.lang.StringBuffer):boolean, freemind.main.XMLElement::checkLiteral(java.lang.String):boolean, freemind.main.XMLElement::parseFromReader(java.io.Reader, int):void, freemind.main.XMLElement::readChar():char, freemind.main.XMLElement::java.io.Reader reader, freemind.main.XMLElement::scanWhitespace():char, freemind.main.XMLElement::scanWhitespace(java.lang.StringBuffer):char, freemind.main.XMLElement::invalidValueSet(java.lang.String):freemind.main.XMLParseException, freemind.main.XMLElement::invalidValue(java.lang.String, java.lang.String):freemind.main.XMLParseException, freemind.main.XMLElement::unexpectedEndOfData():freemind.main.XMLParseException, freemind.main.XMLElement::syntaxError(java.lang.String):freemind.main.XMLParseException, freemind.main.XMLElement::expectedInput(java.lang.String):freemind.main.XMLParseException, freemind.main.XMLElement::unknownEntity(java.lang.String):freemind.main.XMLParseException, freemind.main.XMLElement::scanElement(freemind.main.XMLElement):void, freemind.main.XMLElement::int parserLineNr]
freemind.modes.ArrowLinkAdapter	[freemind.modes.ArrowLinkAdapter::java.lang.String startArrow, freemind.modes.ArrowLinkAdapter::java.lang.String endArrow, freemind.modes.ArrowLinkAdapter::setStartArrow(java.lang.String):void, freemind.modes.ArrowLinkAdapter::setEndArrow(java.lang.String):void]
freemind.modes.attributes.AttributeTableLayoutModel	[freemind.modes.attributes.AttributeTableLayoutModel::javax.swing.event.EventListenerList listenerList, freemind.modes.attributes.AttributeTableLayoutModel::getListenerList():javax.swing.event.EventListenerList, freemind.modes.attributes.AttributeTableLayoutModel::addColumnWidthChangeListener(freemind.modes.attributes.ColumnWidthChangeListener):void, freemind.modes.attributes.AttributeTableLayoutModel::removeColumnWidthChangeListener(freemind.modes.attributes.ColumnWidthChangeListener):void]
freemind.modes.attributes.AttributeTableLayoutModel	[freemind.modes.attributes.AttributeTableLayoutModel::int[] width, freemind.modes.attributes.AttributeTableLayoutModel::getColumnWidth(int):int, freemind.modes.attributes.AttributeTableLayoutModel::setColumnWidth(int, int):void, freemind.modes.attributes.AttributeTableLayoutModel::freemind.modes.attributes.ColumnWidthChangeEvent[] layoutChangeEvent, freemind.modes.attributes.AttributeTableLayoutModel::fireColumnWidthChanged(int):void]
freemind.modes.common.plugins.ReminderHookBase	[freemind.modes.common.plugins.ReminderHookBase::java.lang.String STATE_TOOLTIP, freemind.modes.common.plugins.ReminderHookBase::getStateKey():java.lang.String, freemind.modes.common.plugins.ReminderHookBase::java.lang.String mStateTooltipName]
freemind.modes.mindmapmode.attributeactors.AttributeManagerDialog	[freemind.modes.mindmapmode.attributeactors.AttributeManagerDialog::freemind.modes.attributes.AttributeRegistry model, freemind.modes.mindmapmode.attributeactors.AttributeManagerDialog::javax.swing.JComboBox size, freemind.modes.mindmapmode.attributeactors.AttributeManagerDialog::resetChanges():void, freemind.modes.mindmapmode.attributeactors.AttributeManagerDialog::applyChanges():void]
freemind.preferences.layout.GrabKeyDialog	[freemind.preferences.layout.GrabKeyDialog::freemind.preferences.layout.GrabKeyDialog.InputPane shortcut, freemind.preferences.layout.GrabKeyDialog::boolean isOK, freemind.preferences.layout.GrabKeyDialog::getShortcut():java.lang.String]
freemind.view.mindmapview.NodeViewFactory	[freemind.view.mindmapview.NodeViewFactory::newNodeView(freemind.modes.MindMapNode, int, freemind.view.mindmapview.MapView, java.awt.Container):freemind.view.mindmapview.NodeView, freemind.view.mindmapview.NodeViewFactory::newMainView(freemind.modes.MindMapNode):freemind.view.mindmapview.MainView, freemind.view.mindmapview.NodeViewFactory::fireNodeViewCreated(freemind.view.mindmapview.NodeView):void]
freemind.view.mindmapview.NodeViewFactory	[freemind.view.mindmapview.NodeViewFactory::freemind.view.mindmapview.EdgeView sharpBezierEdgeView, freemind.view.mindmapview.NodeViewFactory::getSharpBezierEdgeView():freemind.view.mindmapview.EdgeView, freemind.view.mindmapview.NodeViewFactory::getEdge(freemind.view.mindmapview.NodeView):freemind.view.mindmapview.EdgeView, freemind.view.mindmapview.NodeViewFactory::freemind.view.mindmapview.EdgeView sharpLinearEdgeView, freemind.view.mindmapview.NodeViewFactory::getSharpEdgeView():freemind.view.mindmapview.EdgeView, freemind.view.mindmapview.NodeViewFactory::freemind.view.mindmapview.EdgeView bezierEdgeView, freemind.view.mindmapview.NodeViewFactory::getBezierEdgeView():freemind.view.mindmapview.EdgeView]
freemind.view.mindmapview.NodeViewFactory	[freemind.view.mindmapview.NodeViewFactory::freemind.view.mindmapview.EdgeView sharpBezierEdgeView, freemind.view.mindmapview.NodeViewFactory::getSharpBezierEdgeView():freemind.view.mindmapview.EdgeView, freemind.view.mindmapview.NodeViewFactory::getEdge(freemind.view.mindmapview.NodeView):freemind.view.mindmapview.EdgeView, freemind.view.mindmapview.NodeViewFactory::freemind.view.mindmapview.EdgeView sharpLinearEdgeView, freemind.view.mindmapview.NodeViewFactory::getSharpEdgeView():freemind.view.mindmapview.EdgeView]
plugins.collaboration.socket.CommunicationBase	[plugins.collaboration.socket.CommunicationBase::int mCurrentState, plugins.collaboration.socket.CommunicationBase::java.lang.String mCurrentStateMutex, plugins.collaboration.socket.CommunicationBase::getCurrentState():int, plugins.collaboration.socket.CommunicationBase::setCurrentState(int):void]
plugins.map.JCursorMapViewer	[plugins.map.JCursorMapViewer::org.openstreetmap.gui.jmapviewer.Coordinate mRectangularStart, plugins.map.JCursorMapViewer::org.openstreetmap.gui.jmapviewer.Coordinate mRectangularEnd, plugins.map.JCursorMapViewer::setRectangular(org.openstreetmap.gui.jmapviewer.Coordinate, org.openstreetmap.gui.jmapviewer.Coordinate):void]
plugins.map.Registration	[plugins.map.Registration::java.util.HashSet mMapNodePositionHolders, plugins.map.Registration::getMapNodePositionHolders():java.util.Set, plugins.map.Registration::registerMapNode(plugins.map.MapNodePositionHolder):void, plugins.map.Registration::deregisterMapNode(plugins.map.MapNodePositionHolder):void, plugins.map.Registration::java.util.HashSet mMapNodePositionListeners, plugins.map.Registration::deregisterMapNodePositionListener(plugins.map.MapNodePositionHolder.MapNodePositionListener):void]
plugins.map.Registration	[plugins.map.Registration::freemind.modes.mindmapmode.MindMapController controller, plugins.map.Registration::java.util.logging.Logger logger, plugins.map.Registration::createTileLoader(org.openstreetmap.gui.jmapviewer.interfaces.TileLoaderListener):org.openstreetmap.gui.jmapviewer.OsmTileLoader, plugins.map.Registration::getCacheDirectory():java.io.File]
plugins.map.Registration	[plugins.map.Registration::org.openstreetmap.gui.jmapviewer.interfaces.TileSource mTileSource, plugins.map.Registration::org.openstreetmap.gui.jmapviewer.TileController mTileController, plugins.map.Registration::getImageForTooltip(org.openstreetmap.gui.jmapviewer.Coordinate, int, java.lang.String):plugins.map.TileImage]
plugins.script.ScriptEditorPanel	[plugins.script.ScriptEditorPanel::javax.swing.JTextArea mScriptTextField, plugins.script.ScriptEditorPanel::java.util.logging.Logger logger, plugins.script.ScriptEditorPanel::getErrorHandler():plugins.script.ScriptingEngine.ErrorHandler]
plugins.script.ScriptEditorPanel	[plugins.script.ScriptEditorPanel::freemind.main.FreeMindMain mFrame, plugins.script.ScriptEditorPanel::plugins.script.ScriptEditorPanel.ScriptModel mScriptModel, plugins.script.ScriptEditorPanel::javax.swing.JList mScriptList, plugins.script.ScriptEditorPanel::java.lang.Integer mLastSelected, plugins.script.ScriptEditorPanel::javax.swing.JTextArea mScriptTextField, plugins.script.ScriptEditorPanel::java.util.logging.Logger logger, plugins.script.ScriptEditorPanel::getErrorHandler():plugins.script.ScriptingEngine.ErrorHandler, plugins.script.ScriptEditorPanel::select(int):void, plugins.script.ScriptEditorPanel::storeCurrent():void, plugins.script.ScriptEditorPanel::javax.swing.JSplitPane mCentralUpperPanel, plugins.script.ScriptEditorPanel::javax.swing.JSplitPane mCentralPanel, plugins.script.ScriptEditorPanel::disposeDialog(boolean):void, plugins.script.ScriptEditorPanel::javax.swing.AbstractAction mRunAction, plugins.script.ScriptEditorPanel::plugins.script.ScriptEditorPanel.SignAction mSignAction]
freemind.controller.filter.FilterToolbar	[freemind.controller.filter.FilterToolbar::javax.swing.JComboBox activeFilterConditionComboBox, freemind.controller.filter.FilterToolbar::getSelectedCondition():freemind.controller.filter.condition.Condition, freemind.controller.filter.FilterToolbar::getFilterConditionModel():javax.swing.ComboBoxModel, freemind.controller.filter.FilterToolbar::setFilterConditionModel(javax.swing.ComboBoxModel):void]
freemind.controller.filter.FilterToolbar	[freemind.controller.filter.FilterToolbar::freemind.controller.filter.FilterController fc, freemind.controller.filter.FilterToolbar::java.lang.String pathToFilterFile, freemind.controller.filter.FilterToolbar::saveConditions():void, freemind.controller.filter.FilterToolbar::addStandardConditions():void, freemind.controller.filter.FilterToolbar::initConditions():void, freemind.controller.filter.FilterToolbar::freemind.controller.filter.FilterToolbar.FilterChangeListener filterChangeListener]
freemind.modes.HistoryInformation	[freemind.modes.HistoryInformation::long createdAt, freemind.modes.HistoryInformation::getCreatedAt():java.util.Date, freemind.modes.HistoryInformation::setCreatedAt(java.util.Date):void]
freemind.modes.HistoryInformation	[freemind.modes.HistoryInformation::long lastModifiedAt, freemind.modes.HistoryInformation::getLastModifiedAt():java.util.Date, freemind.modes.HistoryInformation::setLastModifiedAt(java.util.Date):void]
freemind.modes.mindmapmode.actions.AddArrowLinkAction	[freemind.modes.mindmapmode.actions.AddArrowLinkAction::freemind.modes.mindmapmode.MindMapController modeController, freemind.modes.mindmapmode.actions.AddArrowLinkAction::createAddArrowLinkXmlAction(freemind.modes.MindMapNode, freemind.modes.MindMapNode, java.lang.String):freemind.controller.actions.generated.instance.AddArrowLinkXmlAction, freemind.modes.mindmapmode.actions.AddArrowLinkAction::getLinkRegistry():freemind.modes.MindMapLinkRegistry]
freemind.modes.mindmapmode.actions.RevertAction	[freemind.modes.mindmapmode.actions.RevertAction::createRevertXmlAction(java.io.File):freemind.controller.actions.generated.instance.RevertXmlAction, freemind.modes.mindmapmode.actions.RevertAction::createRevertXmlAction(java.lang.String, java.lang.String, java.lang.String):freemind.controller.actions.generated.instance.RevertXmlAction, freemind.modes.mindmapmode.actions.RevertAction::createRevertXmlAction(freemind.modes.MindMap, java.lang.String, java.lang.String):freemind.controller.actions.generated.instance.RevertXmlAction]
freemind.modes.mindmapmode.attributeactors.ListDialog	[freemind.modes.mindmapmode.attributeactors.ListDialog::javax.swing.JTextField textField, freemind.modes.mindmapmode.attributeactors.ListDialog::getCurrentText():java.lang.String, freemind.modes.mindmapmode.attributeactors.ListDialog::selectText():void]
freemind.modes.mindmapmode.attributeactors.ListDialog	[freemind.modes.mindmapmode.attributeactors.ListDialog::javax.swing.JList list, freemind.modes.mindmapmode.attributeactors.ListDialog::freemind.controller.filter.util.SortedListModel data, freemind.modes.mindmapmode.attributeactors.ListDialog::javax.swing.JButton renameButton, freemind.modes.mindmapmode.attributeactors.ListDialog::getIndexOf(java.lang.String):int, freemind.modes.mindmapmode.attributeactors.ListDialog::javax.swing.JButton deleteButton, freemind.modes.mindmapmode.attributeactors.ListDialog::updateButtons():void, freemind.modes.mindmapmode.attributeactors.ListDialog::javax.swing.JButton addButton]
freemind.modes.mindmapmode.dialogs.StylePatternFrame	[freemind.modes.mindmapmode.dialogs.StylePatternFrame::setPatternControls(freemind.controller.actions.generated.instance.PatternPropertyBase, freemind.common.PropertyBean, freemind.common.PropertyBean, java.lang.String, freemind.modes.mindmapmode.dialogs.StylePatternFrame.ValueTransformator):void, freemind.modes.mindmapmode.dialogs.StylePatternFrame::getPatternResult(freemind.controller.actions.generated.instance.PatternPropertyBase, freemind.common.ThreeCheckBoxProperty, freemind.common.PropertyBean):freemind.controller.actions.generated.instance.PatternPropertyBase, freemind.modes.mindmapmode.dialogs.StylePatternFrame::getPatternResult(freemind.controller.actions.generated.instance.PatternPropertyBase, freemind.common.ThreeCheckBoxProperty, freemind.common.PropertyBean, freemind.modes.mindmapmode.dialogs.StylePatternFrame.ValueTransformator):freemind.controller.actions.generated.instance.PatternPropertyBase]
freemind.modes.mindmapmode.dialogs.StylePatternFrame	[freemind.modes.mindmapmode.dialogs.StylePatternFrame::transformEdgeWidth(java.lang.String):java.lang.String, freemind.modes.mindmapmode.dialogs.StylePatternFrame::getEdgeWidthTransformation():java.util.HashMap, freemind.modes.mindmapmode.dialogs.StylePatternFrame::transformStringToWidth(java.lang.String):java.lang.String]
freemind.modes.mindmapmode.dialogs.StylePatternFrame	[freemind.modes.mindmapmode.dialogs.StylePatternFrame::java.util.List mPatternList, freemind.modes.mindmapmode.dialogs.StylePatternFrame::getPatternNames():java.util.Vector, freemind.modes.mindmapmode.dialogs.StylePatternFrame::setPatternList(java.util.List):void]
freemind.preferences.layout.OptionPanel	[freemind.preferences.layout.OptionPanel::java.util.Vector controls, freemind.preferences.layout.OptionPanel::getOptionProperties():java.util.Properties, freemind.preferences.layout.OptionPanel::setProperties():void]
freemind.preferences.layout.OptionPanel	[freemind.preferences.layout.OptionPanel::java.util.HashMap tabButtonMap, freemind.preferences.layout.OptionPanel::getTabButton(java.lang.String):javax.swing.JButton, freemind.preferences.layout.OptionPanel::getAllButtons():java.util.Collection]
plugins.collaboration.database.DatabaseRegistration	[plugins.collaboration.database.DatabaseRegistration::freemind.modes.mindmapmode.MindMapController mController, plugins.collaboration.database.DatabaseRegistration::isMaster():boolean, plugins.collaboration.database.DatabaseRegistration::isSlave():boolean]
plugins.collaboration.socket.SocketRegistration	[plugins.collaboration.socket.SocketRegistration::freemind.modes.mindmapmode.MindMapController mController, plugins.collaboration.socket.SocketRegistration::isMaster():boolean, plugins.collaboration.socket.SocketRegistration::isSlave():boolean]
accessories.plugins.time.TimeManagement	[accessories.plugins.time.TimeManagement::accessories.plugins.time.JTripleCalendar calendar, accessories.plugins.time.TimeManagement::javax.swing.JTextField hourField, accessories.plugins.time.TimeManagement::javax.swing.JTextField minuteField, accessories.plugins.time.TimeManagement::getTimePanel():javax.swing.JPanel, accessories.plugins.time.TimeManagement::getCalendarDate():java.util.Date, accessories.plugins.time.TimeManagement::javax.swing.JPanel timePanel, accessories.plugins.time.TimeManagement::javax.swing.JDialog dialog, accessories.plugins.time.TimeManagement::disposeDialog():void]
accessories.plugins.time.TimeManagement	[accessories.plugins.time.TimeManagement::accessories.plugins.time.JTripleCalendar calendar, accessories.plugins.time.TimeManagement::javax.swing.JTextField hourField, accessories.plugins.time.TimeManagement::javax.swing.JTextField minuteField, accessories.plugins.time.TimeManagement::getTimePanel():javax.swing.JPanel, accessories.plugins.time.TimeManagement::getCalendarDate():java.util.Date, accessories.plugins.time.TimeManagement::javax.swing.JPanel timePanel]
freemind.controller.filter.FilterController	[freemind.controller.filter.FilterController::freemind.controller.Controller c, freemind.controller.filter.FilterController::showFilterToolbar(boolean):void, freemind.controller.filter.FilterController::refreshMap():void, freemind.controller.filter.FilterController::isVisible():boolean, freemind.controller.filter.FilterController::javax.swing.DefaultComboBoxModel filterConditionModel, freemind.controller.filter.FilterController::getFilterToolbar():freemind.controller.filter.FilterToolbar, freemind.controller.filter.FilterController::freemind.controller.filter.FilterToolbar filterToolbar, freemind.controller.filter.FilterController::saveConditions():void, freemind.controller.filter.FilterController::setFilterConditionModel(javax.swing.DefaultComboBoxModel):void]
freemind.controller.filter.FilterController	[freemind.controller.filter.FilterController::freemind.controller.Controller c, freemind.controller.filter.FilterController::showFilterToolbar(boolean):void, freemind.controller.filter.FilterController::refreshMap():void, freemind.controller.filter.FilterController::isVisible():boolean, freemind.controller.filter.FilterController::javax.swing.DefaultComboBoxModel filterConditionModel, freemind.controller.filter.FilterController::getFilterToolbar():freemind.controller.filter.FilterToolbar]
freemind.controller.filter.FilterController	[freemind.controller.filter.FilterController::freemind.controller.Controller c, freemind.controller.filter.FilterController::showFilterToolbar(boolean):void, freemind.controller.filter.FilterController::refreshMap():void, freemind.controller.filter.FilterController::isVisible():boolean]
freemind.main.Tools.DesEncrypter	[freemind.main.Tools.DesEncrypter::javax.crypto.Cipher ecipher, freemind.main.Tools.DesEncrypter::encrypt(java.lang.String):java.lang.String, freemind.main.Tools.DesEncrypter::byte[] salt, freemind.main.Tools.DesEncrypter::int iterationCount, freemind.main.Tools.DesEncrypter::char[] passPhrase, freemind.main.Tools.DesEncrypter::java.lang.String mAlgorithm, freemind.main.Tools.DesEncrypter::init(byte[]):void]
freemind.main.Tools.DesEncrypter	[freemind.main.Tools.DesEncrypter::byte[] salt, freemind.main.Tools.DesEncrypter::int iterationCount, freemind.main.Tools.DesEncrypter::char[] passPhrase, freemind.main.Tools.DesEncrypter::java.lang.String mAlgorithm, freemind.main.Tools.DesEncrypter::init(byte[]):void]
accessories.plugins.time.JDayChooser	[accessories.plugins.time.JDayChooser::java.util.Date minSelectableDate, accessories.plugins.time.JDayChooser::setMinSelectableDate(java.util.Date):java.util.Date, accessories.plugins.time.JDayChooser::setSelectableDateRange(java.util.Date, java.util.Date):void, accessories.plugins.time.JDayChooser::java.util.Date maxSelectableDate, accessories.plugins.time.JDayChooser::setMaxSelectableDate(java.util.Date):java.util.Date, accessories.plugins.time.JDayChooser::java.util.Date defaultMinSelectableDate, accessories.plugins.time.JDayChooser::java.util.Date defaultMaxSelectableDate]
freemind.modes.mindmapmode.actions.IconAction	[freemind.modes.mindmapmode.actions.IconAction::freemind.modes.mindmapmode.actions.RemoveIconAction removeLastIconAction, freemind.modes.mindmapmode.actions.IconAction::getAddIconActionPair(freemind.modes.MindMapNode, freemind.modes.MindIcon, int):freemind.modes.mindmapmode.actions.xml.ActionPair, freemind.modes.mindmapmode.actions.IconAction::getRemoveIconActionPair(freemind.modes.MindMapNode, freemind.modes.MindIcon, int):freemind.modes.mindmapmode.actions.xml.ActionPair, freemind.modes.mindmapmode.actions.IconAction::getAddLastIconActionPair(freemind.modes.MindMapNode, freemind.modes.MindIcon):freemind.modes.mindmapmode.actions.xml.ActionPair, freemind.modes.mindmapmode.actions.IconAction::getToggleIconActionPair(freemind.modes.MindMapNode, freemind.modes.MindIcon):freemind.modes.mindmapmode.actions.xml.ActionPair, freemind.modes.mindmapmode.actions.IconAction::getRemoveIconActionPair(freemind.modes.MindMapNode, freemind.modes.MindIcon, boolean):freemind.modes.mindmapmode.actions.xml.ActionPair]
freemind.modes.mindmapmode.actions.IconAction	[freemind.modes.mindmapmode.actions.IconAction::freemind.modes.mindmapmode.actions.RemoveIconAction removeLastIconAction, freemind.modes.mindmapmode.actions.IconAction::getAddIconActionPair(freemind.modes.MindMapNode, freemind.modes.MindIcon, int):freemind.modes.mindmapmode.actions.xml.ActionPair, freemind.modes.mindmapmode.actions.IconAction::getRemoveIconActionPair(freemind.modes.MindMapNode, freemind.modes.MindIcon, int):freemind.modes.mindmapmode.actions.xml.ActionPair, freemind.modes.mindmapmode.actions.IconAction::getAddLastIconActionPair(freemind.modes.MindMapNode, freemind.modes.MindIcon):freemind.modes.mindmapmode.actions.xml.ActionPair]
freemind.modes.mindmapmode.MindMapHTMLWriter	[freemind.modes.mindmapmode.MindMapHTMLWriter::java.io.Writer fileout, freemind.modes.mindmapmode.MindMapHTMLWriter::saveHTML(java.util.List):void, freemind.modes.mindmapmode.MindMapHTMLWriter::boolean writeFoldingCode, freemind.modes.mindmapmode.MindMapHTMLWriter::writeStyle():void]
freemind.modes.mindmapmode.MindMapHTMLWriter	[freemind.modes.mindmapmode.MindMapHTMLWriter::java.io.Writer fileout, freemind.modes.mindmapmode.MindMapHTMLWriter::saveHTML(java.util.List):void, freemind.modes.mindmapmode.MindMapHTMLWriter::boolean writeFoldingCode, freemind.modes.mindmapmode.MindMapHTMLWriter::writeStyle():void, freemind.modes.mindmapmode.MindMapHTMLWriter::writeBodyWithFolding(freemind.modes.mindmapmode.MindMapNodeModel):void, freemind.modes.mindmapmode.MindMapHTMLWriter::writeJavaScript():void, freemind.modes.mindmapmode.MindMapHTMLWriter::writeFoldingButtons(java.lang.String):void, freemind.modes.mindmapmode.MindMapHTMLWriter::saveHTML(freemind.modes.mindmapmode.MindMapNodeModel):void, freemind.modes.mindmapmode.MindMapHTMLWriter::boolean exportIcons, freemind.modes.mindmapmode.MindMapHTMLWriter::writeModelContent(freemind.modes.mindmapmode.MindMapNodeModel):void, freemind.modes.mindmapmode.MindMapHTMLWriter::hasHtml(freemind.modes.mindmapmode.MindMapNodeModel):boolean]
plugins.collaboration.database.UpdateThread	[plugins.collaboration.database.UpdateThread::java.math.BigInteger mPrimaryKeyMutex, plugins.collaboration.database.UpdateThread::insertIntoActionTable(java.lang.String):void, plugins.collaboration.database.UpdateThread::long mPrimaryKey, plugins.collaboration.database.UpdateThread::signalEndOfSession():void]
accessories.plugins.time.JTripleCalendar.JInfoPanel	[accessories.plugins.time.JTripleCalendar.JInfoPanel::accessories.plugins.time.JMonthChooser monthChooser, accessories.plugins.time.JTripleCalendar.JInfoPanel::accessories.plugins.time.JYearChooser yearChooser, accessories.plugins.time.JTripleCalendar.JInfoPanel::setDate(java.util.Calendar):void]
accessories.plugins.time.TableSorter	[accessories.plugins.time.TableSorter::java.util.List sortingColumns, accessories.plugins.time.TableSorter::getDirective(int):accessories.plugins.time.TableSorter.Directive, accessories.plugins.time.TableSorter::setSortingStatus(int, int):void, accessories.plugins.time.TableSorter::getHeaderRendererIcon(int, int):javax.swing.Icon, accessories.plugins.time.TableSorter::getSortingStatus(int):int, accessories.plugins.time.TableSorter::cancelSorting():void, accessories.plugins.time.TableSorter::isSorting():boolean]
accessories.plugins.time.TableSorter	[accessories.plugins.time.TableSorter::accessories.plugins.time.TableSorter.Row[] viewToModel, accessories.plugins.time.TableSorter::clearSortingState():void, accessories.plugins.time.TableSorter::int[] modelToView, accessories.plugins.time.TableSorter::getViewToModel():accessories.plugins.time.TableSorter.Row[], accessories.plugins.time.TableSorter::modelIndex(int):int, accessories.plugins.time.TableSorter::getModelToView():int[]]
freemind.common.UnicodeReader	[freemind.common.UnicodeReader::java.io.PushbackInputStream internalIn, freemind.common.UnicodeReader::init():void, freemind.common.UnicodeReader::java.lang.String defaultEnc]
freemind.controller.StructuredMenuHolder	[freemind.controller.StructuredMenuHolder::java.util.Map menuMap, freemind.controller.StructuredMenuHolder::addCategory(java.lang.String):void, freemind.controller.StructuredMenuHolder::getCategoryMap(java.util.StringTokenizer, java.util.Map):freemind.controller.StructuredMenuHolder.MapTokenPair, freemind.controller.StructuredMenuHolder::addSeparator(java.lang.String):void, freemind.controller.StructuredMenuHolder::addMenu(java.lang.Object, java.util.StringTokenizer):java.lang.Object, freemind.controller.StructuredMenuHolder::updateMenus(javax.swing.JMenuBar, java.lang.String):void, freemind.controller.StructuredMenuHolder::updateMenus(javax.swing.JPopupMenu, java.lang.String):void, freemind.controller.StructuredMenuHolder::updateMenus(javax.swing.JToolBar, java.lang.String):void]
freemind.main.FreeMindApplet	[freemind.main.FreeMindApplet::freemind.main.FreeMindCommon mFreeMindCommon, freemind.main.FreeMindApplet::updateLookAndFeel():void, freemind.main.FreeMindApplet::setPropertyByParameter(java.lang.String):void]
freemind.modes.common.dialogs.EnterPasswordDialog	[freemind.modes.common.dialogs.EnterPasswordDialog::javax.swing.JButton jOKButton, freemind.modes.common.dialogs.EnterPasswordDialog::getJOKButton():javax.swing.JButton, freemind.modes.common.dialogs.EnterPasswordDialog::freemind.common.TextTranslator mTranslator]
freemind.modes.common.dialogs.EnterPasswordDialog	[freemind.modes.common.dialogs.EnterPasswordDialog::javax.swing.JPasswordField jPasswordField1, freemind.modes.common.dialogs.EnterPasswordDialog::getJPasswordField1():javax.swing.JPasswordField, freemind.modes.common.dialogs.EnterPasswordDialog::checkEqualAndMinimumSize():boolean, freemind.modes.common.dialogs.EnterPasswordDialog::boolean enterTwoPasswords]
freemind.modes.mindmapmode.actions.PasteAction	[freemind.modes.mindmapmode.actions.PasteAction::freemind.modes.mindmapmode.MindMapController mMindMapController, freemind.modes.mindmapmode.actions.PasteAction::getPasteNodeAction(java.awt.datatransfer.Transferable, freemind.modes.mindmapmode.actions.PasteAction.NodeCoordinate, freemind.controller.actions.generated.instance.UndoPasteNodeAction):freemind.controller.actions.generated.instance.PasteNodeAction, freemind.modes.mindmapmode.actions.PasteAction::paste(java.awt.datatransfer.Transferable, freemind.modes.MindMapNode, boolean, boolean):boolean]
freemind.view.mindmapview.ArrowLinkView	[freemind.view.mindmapview.ArrowLinkView::int MAXIMAL_RECTANGLE_SIZE_FOR_COLLISION_DETECTION, freemind.view.mindmapview.ArrowLinkView::detectCollision(java.awt.Point):boolean, freemind.view.mindmapview.ArrowLinkView::getControlPoint(java.awt.geom.Point2D):java.awt.geom.Rectangle2D]
freemind.modes.common.dialogs.IconSelectionPopupDialog	[freemind.modes.common.dialogs.IconSelectionPopupDialog::int numOfIcons, freemind.modes.common.dialogs.IconSelectionPopupDialog::int yDimension, freemind.modes.common.dialogs.IconSelectionPopupDialog::int xDimension, freemind.modes.common.dialogs.IconSelectionPopupDialog::getPositionFromIndex(int):freemind.modes.common.dialogs.IconSelectionPopupDialog.Position, freemind.modes.common.dialogs.IconSelectionPopupDialog::canSelect(freemind.modes.common.dialogs.IconSelectionPopupDialog.Position):boolean, freemind.modes.common.dialogs.IconSelectionPopupDialog::calculateIndex(freemind.modes.common.dialogs.IconSelectionPopupDialog.Position):int, freemind.modes.common.dialogs.IconSelectionPopupDialog::cursorLeft():void, freemind.modes.common.dialogs.IconSelectionPopupDialog::cursorRight():void, freemind.modes.common.dialogs.IconSelectionPopupDialog::cursorUp():void, freemind.modes.common.dialogs.IconSelectionPopupDialog::cursorDown():void]
freemind.modes.mindmapmode.actions.UndoAction	[freemind.modes.mindmapmode.actions.UndoAction::boolean isUndoAction, freemind.modes.mindmapmode.actions.UndoAction::undoDoAction(freemind.modes.mindmapmode.actions.xml.ActionPair):void, freemind.modes.mindmapmode.actions.UndoAction::print():void, freemind.modes.mindmapmode.actions.UndoAction::long timeOfLastAdd, freemind.modes.mindmapmode.actions.UndoAction::boolean actionFrameStarted, freemind.modes.mindmapmode.actions.UndoAction::startActionFrame():void, freemind.modes.mindmapmode.actions.UndoAction::add(freemind.modes.mindmapmode.actions.xml.ActionPair):void]
freemind.modes.mindmapmode.actions.UndoAction	[freemind.modes.mindmapmode.actions.UndoAction::long timeOfLastAdd, freemind.modes.mindmapmode.actions.UndoAction::boolean actionFrameStarted, freemind.modes.mindmapmode.actions.UndoAction::startActionFrame():void, freemind.modes.mindmapmode.actions.UndoAction::add(freemind.modes.mindmapmode.actions.xml.ActionPair):void]
freemind.view.mindmapview.attributeview.AttributePopupMenu	[freemind.view.mindmapview.attributeview.AttributePopupMenu::javax.swing.JMenuItem insert, freemind.view.mindmapview.attributeview.AttributePopupMenu::getInsert():javax.swing.JMenuItem, freemind.view.mindmapview.attributeview.AttributePopupMenu::getDelete():javax.swing.JMenuItem, freemind.view.mindmapview.attributeview.AttributePopupMenu::javax.swing.JMenuItem delete, freemind.view.mindmapview.attributeview.AttributePopupMenu::getUp():javax.swing.JMenuItem, freemind.view.mindmapview.attributeview.AttributePopupMenu::javax.swing.JMenuItem up, freemind.view.mindmapview.attributeview.AttributePopupMenu::getDown():javax.swing.JMenuItem, freemind.view.mindmapview.attributeview.AttributePopupMenu::javax.swing.JMenuItem down]
freemind.controller.filter.FilterComposerDialog	[freemind.controller.filter.FilterComposerDialog::freemind.controller.filter.FilterController fc, freemind.controller.filter.FilterComposerDialog::javax.swing.DefaultComboBoxModel internalConditionsModel, freemind.controller.filter.FilterComposerDialog::freemind.controller.filter.FilterComposerDialog.ConditionListSelectionListener conditionListListener, freemind.controller.filter.FilterComposerDialog::initInternalConditionModel():void, freemind.controller.filter.FilterComposerDialog::applyChanges():void]
plugins.map.TileImage	[plugins.map.TileImage::org.openstreetmap.gui.jmapviewer.Tile[][] mTiles, plugins.map.TileImage::boolean mTilesPresent, plugins.map.TileImage::boolean mImageCreated, plugins.map.TileImage::isLoaded():boolean]
